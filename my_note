-> Model üzerinden authenticable bağlanması
-> Api üzerinden register olurken modelin kaydedilmesi
-> Giriş yaparken modelin bulunması ve auth edilmesi
-> Çıkış yaparken tokenin silinmesi
-> Farklı servislerde auth un kontrol edilip modelin çekilmesi
----------------sanctum setup----------------------
-> composer require laravel/sanctum
-> php artisan vendor:publish --provider="Laravel\Sanctum\SanctumServiceProvider"
-> php artisan migrate
-> php artisan make:controller Api\AuthController
then: create routes in routes/api.php
	Route::post('/auth/register', [AuthController::class, 'createUser']);
	Route::post('/auth/login', [AuthController::class, 'loginUser']);
then write controller class
------------<controller class>-----------------
<?php

namespace App\Http\Controllers\Api;

use App\Models\User;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Validator;

class AuthController extends Controller
{
    /**
     * Create User
     * @param Request $request
     * @return User
     */
    public function createUser(Request $request)
    {
        try {
            //Validated
            $validateUser = Validator::make($request->all(),
            [
                'name' => 'required',
                'email' => 'required|email|unique:users,email',
                'password' => 'required'
            ]);

            if($validateUser->fails()){
                return response()->json([
                    'status' => false,
                    'message' => 'validation error',
                    'errors' => $validateUser->errors()
                ], 401);
            }

            $user = User::create([
                'name' => $request->name,
                'email' => $request->email,
                'password' => Hash::make($request->password)
            ]);

            return response()->json([
                'status' => true,
                'message' => 'User Created Successfully',
                'token' => $user->createToken("API TOKEN")->plainTextToken
            ], 200);

        } catch (\Throwable $th) {
            return response()->json([
                'status' => false,
                'message' => $th->getMessage()
            ], 500);
        }
    }

    /**
     * Login The User
     * @param Request $request
     * @return User
     */
    public function loginUser(Request $request)
    {
        try {
            $validateUser = Validator::make($request->all(),
            [
                'email' => 'required|email',
                'password' => 'required'
            ]);

            if($validateUser->fails()){
                return response()->json([
                    'status' => false,
                    'message' => 'validation error',
                    'errors' => $validateUser->errors()
                ], 401);
            }

            if(!Auth::attempt($request->only(['email', 'password']))){
                return response()->json([
                    'status' => false,
                    'message' => 'Email & Password does not match with our record.',
                ], 401);
            }

            $user = User::where('email', $request->email)->first();

            return response()->json([
                'status' => true,
                'message' => 'User Logged In Successfully',
                'token' => $user->createToken("Bearer TOKEN")->plainTextToken
            ], 200);

        } catch (\Throwable $th) {
            return response()->json([
                'status' => false,
                'message' => $th->getMessage()
            ], 500);
        }
    }
}
------------<controller class\>-----------------
then:
configurate .env for db
-> php artisan serve
now you can test with postman
then i will create a books table
1.crete migration class -> php artisan make:migration create_books_table

2. edit for you database/migrations/create_book_table.php . 
an example: 
---------------<migration example>----------
public function up(): void
    {
        Schema::create('books', function (Blueprint $table) {
            $table->id();
            $table->string('title');
            $table->string('author');
            $table->integer('pages');
            $table->timestamps();
        });
    }
---------------<migration example\>----------
run migration:
-> php artisan migrate
3. create a model:
-> php artisan make:model Book
write fillable list :  protected $fillable=['title','author','pages'];

4. create book controller :
-> php artisan make:controller Api\BookController
---------<Book controller example>-----------------
class BookController extends Controller
{
    public function index()
    {
        $books = Book::all();

        return response()->json($books);
    }

    // Diğer metodları da buraya ekleyebilirsiniz (örn. store, show, update, destroy)
}
---------<Book controller example\>-----------------
5. add route:
Route::get('/books', [BookController::class, 'index']);

--------------get method with token------------------
path:routes/api.php:
Route::get('abc', function () {
    return response()->json(['status'=>false,'message' => 'unauthenticated'], 401);
})->name('unauthenticatedUser');
// we create a 'get' route for unauthenticated user message
// change route name 
path: app/Http/Middleware/Authenticated.php
protected function redirectTo(Request $request): ?string
    {
        return $request->expectsJson() ? null : route('unauthenticatedUser');
    }
// then wrap route with middleware group

Route::middleware('auth:sanctum')->group(function () {
    Route::get('/books', [BookController::class, 'index']);
});
-----------------add books with token-------------------
//we add a column as user_id in books table
//then write store method

    public function store(Request $request)
    {
        $user=$request->user();
        $request->merge(['user_id' => $user->id]);
        $book = Book::create($request->all());
        return response()->json(['status'=>true,'message' => 'Book created','data'=>$book], 201);
    }
 